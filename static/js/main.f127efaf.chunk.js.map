{"version":3,"sources":["assets/sound1.mp3","assets/sound2.mp3","components/Components.jsx","formatter.js","components/Clock.jsx","components/TimeDisplayer.jsx","components/ActiveHandler.jsx","components/DurationPicker.jsx","persitance.js","components/TotalDurationDisplayer.jsx","components/Timer.jsx","components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyButton","props","className","children","formatTimeMinSec","seconds","mins","Math","floor","secs","length","Clock","useState","time","setTime","update","d","Date","getHours","getMinutes","useEffect","setInterval","TimeDisplayer","passedSeconds","totalSeconds","style","width","MouseActiveContext","React","createContext","ActiveHandler","mouseActive","setMouseActive","onMouseMove","e","timeout","preventDefault","clearTimeout","setTimeout","Provider","value","DurationPicker","setTimerDuration","setValue","placeholder","onChange","newValue","target","isNaN","parsed","parseInt","addSession","duration","token","toDateString","sessions","JSON","parse","localStorage","getItem","push","setItem","stringify","console","log","getTodaySessions","date","ses","getSession","TotalDurationDisplayer","totalTime","reduce","a","b","hours","minutes","s1","Audio","sound1","s2","sound2","Timer","state","timerActive","getTimerState","setState","includes","play","catch","startTimer","pauseTimer","resetTimer","this","timerState","document","title","context","getElementById","cursor","temp","Fragment","onClick","Component","contextType","MainPage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f127efaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound1.812c7504.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound2.04054870.mp3\";","import React from \"react\";\n\nexport const MyButton = (props) => (\n  <button\n    className=\"bg-gray-800 mx-8 my-4 w-40 py-3 shadow-md rounded-md border-b-2 border-gray-700 hover:border-gray-600 space-y-1 text-3xl text-gray-500 hover:text-gray-400 focus:outline-none select-none text-center transition duration-300\"\n    {...props}\n  >\n    {props.children}\n  </button>\n);\n","export const formatTimeMinSec = (seconds) => {\n  let mins = Math.floor(seconds / 60) + \"\";\n  let secs = (seconds % 60) + \"\";\n  if (secs.length === 1) secs = \"0\" + secs;\n  return mins + \":\" + secs;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { formatTimeMinSec } from \"../formatter\";\n\nexport const Clock = ({ className }) => {\n  const [time, setTime] = useState();\n  let update = () => {\n    let d = new Date();\n    setTime(formatTimeMinSec(d.getHours() * 60 + d.getMinutes()));\n  };\n  useEffect(() => {\n    update();\n    setInterval(update, 1000);\n  }, []);\n  return <h1 className={\"text-6xl text-gray-700 \" + className}>{time}</h1>;\n};\n","import React from \"react\";\nimport { formatTimeMinSec } from \"../formatter\";\nimport { Clock } from \"./Clock\";\n\nexport const TimeDisplayer = ({ passedSeconds, totalSeconds }) => {\n  return (\n    <div className=\"w-2/3 my-16 lg:my-24 mx-auto\">\n      <div className=\"flex w-full justify-center md:justify-between items-end\">\n        <h1 className=\"big-text text-gray-500\">\n          {formatTimeMinSec(passedSeconds)}\n        </h1>\n        <Clock className=\"hidden md:block\"></Clock>\n      </div>\n      <div className=\"w-full h-px bg-gray-700\"></div>\n      <div className=\"w-full h-px bg-gray-700\"></div>\n      <div\n        className=\"h-2 bg-gray-800\"\n        style={{ width: (1 - passedSeconds / totalSeconds) * 100 + \"%\" }}\n      ></div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nexport const MouseActiveContext = React.createContext(true);\n\nexport const ActiveHandler = ({ children }) => {\n  const [mouseActive, setMouseActive] = useState(true);\n\n  let setMouseMove = (e) => {\n    e.preventDefault();\n    setMouseActive(true);\n\n    let timeout;\n    (() => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => setMouseActive(false), 5000);\n    })();\n  };\n\n  return (\n    <div className=\"\" onMouseMove={setMouseMove}>\n      <MouseActiveContext.Provider value={mouseActive}>\n        {children}\n      </MouseActiveContext.Provider>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nexport const DurationPicker = ({ setTimerDuration }) => {\n  const [value, setValue] = useState(\"\");\n  const handleChange = (e) => {\n    // e.preventDefault();\n    const newValue = e.target.value;\n\n    if (newValue === \"\") {\n      setTimerDuration(25 * 60);\n      setValue(newValue);\n      return;\n    }\n    if (isNaN(newValue) || newValue === 0) return;\n    setValue(newValue);\n    const parsed = parseInt(newValue);\n    setTimerDuration(parsed * 60);\n  };\n  return (\n    <input\n      className=\"my-4 placeholder-gray-500 shadow bg-gray-800 mx-8 w-40 py-3 rounded-md text-3xl text-gray-400 focus:outline-none text-center\"\n      placeholder=\"Custom\"\n      value={value}\n      onChange={handleChange}\n    ></input>\n  );\n};\n","const getTodayToken = () => {\n  let d = new Date();\n  return d.toDateString();\n};\n\nexport const getSession = (date) => {\n  const token = date.toDateString();\n  const ses = JSON.parse(localStorage.getItem(token));\n  if (ses === null) return [];\n  return ses;\n};\n\nexport const addSession = (duration) => {\n  const token = getTodayToken();\n  var sessions = JSON.parse(localStorage.getItem(token));\n  if (sessions === null) sessions = [];\n  sessions.push(duration);\n  localStorage.setItem(token, JSON.stringify(sessions));\n  console.log(\"storing\", sessions);\n};\n\nexport const getTodaySessions = () => {\n  let d = new Date();\n  return getSession(d);\n};\n\nexport const getTodayTotalTime = () =>\n  getTodaySessions().reduce((a, b) => a + b, 0);\n","import React from \"react\";\nimport { getTodayTotalTime } from \"../persitance\";\n\nexport const TotalDurationDisplayer = () => {\n  const totalTime = getTodayTotalTime();\n  let hours = Math.floor(totalTime / 3600) + \"\";\n  let minutes = (Math.floor(totalTime / 60) % 60) + \"\";\n  return (\n    <div className=\"absolute bottom-0 w-full\">\n      <h4 className=\"text-gray-700 text-center mb-8\">\n        You have been productive for {hours} hours and {minutes} minutes today.\n      </h4>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport sound1 from \"../assets/sound1.mp3\";\nimport sound2 from \"../assets/sound2.mp3\";\nimport { MyButton } from \"./Components\";\nimport { formatTimeMinSec } from \"../formatter\";\nimport { TimeDisplayer } from \"./TimeDisplayer\";\nimport { MouseActiveContext } from \"./ActiveHandler\";\nimport { DurationPicker } from \"./DurationPicker\";\nimport { addSession } from \"../persitance\";\nimport { TotalDurationDisplayer } from \"./TotalDurationDisplayer\";\n\nvar s1 = new Audio(sound1);\nvar s2 = new Audio(sound2);\n\nexport class Timer extends Component {\n  state = {\n    duration: 25 * 60,\n    seconds: 25 * 60,\n    timerActive: false,\n  };\n\n  static contextType = MouseActiveContext;\n\n  componentDidMount() {\n    this.update();\n    setInterval(this.update, 1000);\n    this.resetTimer();\n  }\n\n  // returns \"Creating\", \"Paused\", \"Finished\", \"Going\"\n  getTimerState = () => {\n    let { duration, seconds, timerActive } = this.state;\n    if (seconds === duration && !timerActive) return \"Creating\";\n    if (seconds === 0) return \"Finished\";\n    if (!timerActive) return \"Paused\";\n    return \"Going\";\n  };\n\n  update = () => {\n    if (this.state.timerActive && this.state.seconds > 0) {\n      this.setState({ seconds: this.state.seconds - 1 });\n      if (this.state.seconds === 1) {\n        addSession(this.state.duration);\n      }\n      if ([1, 2, 3].includes(this.state.seconds)) s1.play().catch(console.log); // 1s delay\n      if (this.state.seconds === 0) s2.play().catch(console.log);\n    }\n  };\n\n  startTimer = () => this.setState({ timerActive: true });\n\n  pauseTimer = () => this.setState({ timerActive: false });\n\n  resetTimer = () =>\n    this.setState({ timerActive: false, seconds: this.state.duration });\n\n  setTimerDuration = (duration) =>\n    this.setState({ duration, seconds: duration, timerActive: false });\n\n  render() {\n    let { seconds, duration } = this.state;\n    let timerState = this.getTimerState();\n    document.title = \"Pomodoro - \" + formatTimeMinSec(seconds);\n\n    if (!this.context && timerState === \"Going\")\n      document.getElementById(\"root\").style.cursor = \"none\";\n    else document.getElementById(\"root\").style.cursor = \"auto\";\n\n    const temp = [\"Creating\", \"Finished\"].includes(timerState)\n      ? \"visible\"\n      : \"invisible\";\n\n    return (\n      <React.Fragment>\n        <div className=\"w-full absolute h-screen flex flex-col justify-center\">\n          <div\n            className={\n              \"flex flex-col items-center md:flex-row justify-center \" + temp\n            }\n          >\n            <MyButton onClick={() => this.setTimerDuration(25 * 60)}>\n              25:00\n            </MyButton>\n            <MyButton onClick={() => this.setTimerDuration(5 * 60)}>\n              5:00\n            </MyButton>\n            <DurationPicker setTimerDuration={this.setTimerDuration} />\n          </div>\n\n          <TimeDisplayer passedSeconds={seconds} totalSeconds={duration} />\n\n          <div className=\"flex justify-center items-center h-20\">\n            {[\"Creating\"].includes(timerState) && (\n              <MyButton\n                onClick={() => {\n                  this.resetTimer();\n                  this.startTimer();\n                }}\n              >\n                Start\n              </MyButton>\n            )}\n            {timerState === \"Going\" && (\n              <div\n                className={\n                  \"transition duration-1000 \" +\n                  (this.context ? \"\" : \"opacity-0 hover:opacity-100\")\n                }\n              >\n                <MyButton onClick={this.pauseTimer}>Pause</MyButton>\n              </div>\n            )}\n            {timerState === \"Paused\" && (\n              <div className=\"flex flex-col sm:flex-row justify-center\">\n                <MyButton onClick={this.startTimer}>Continue</MyButton>\n                <MyButton onClick={this.resetTimer}>Reset</MyButton>\n              </div>\n            )}\n          </div>\n        </div>\n        {(timerState === \"Creating\" || timerState === \"Finished\") && (\n          <TotalDurationDisplayer></TotalDurationDisplayer>\n        )}\n      </React.Fragment>\n    );\n  }\n}\nexport default Timer;\n","import React, { Component } from \"react\";\nimport Timer from \"./Timer\";\nimport { ActiveHandler } from \"./ActiveHandler\";\n\nclass MainPage extends Component {\n  render() {\n    return (\n      <div className=\"h-screen bg-gray-900\">\n        <ActiveHandler>\n          <Timer></Timer>\n        </ActiveHandler>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from \"react\";\nimport \"./tailwind.generated.css\";\nimport MainPage from \"./components/MainPage\";\n\nclass App extends React.Component {\n  render() {\n    return <MainPage></MainPage>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}