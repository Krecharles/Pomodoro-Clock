{"version":3,"sources":["assets/sound1.mp3","assets/sound2.mp3","components/Components.jsx","components/Timer.jsx","components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyButton","props","className","children","s1","UIfx","sound1","s2","sound2","Timer","state","duration","seconds","timerActive","time","mouseActive","playedTimeStamps","getTimerState","update","d","Date","setState","getHours","getMinutes","startTimer","pauseTimer","resetTimer","document","title","setTimerDuration","setMouseMove","e","timeout","preventDefault","clearTimeout","setTimeout","getFormattedTime","mins","Math","floor","length","secs","handleSound","includes","push","play","console","log","this","setInterval","timerState","progression","formattedTime","currentTime","getElementById","style","cursor","onMouseMove","Fragment","onClick","width","Component","MainPage","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8ae56725.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound1.812c7504.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound2.04054870.mp3\";","import React from \"react\";\n\nexport const MyButton = (props) => (\n  <button\n    className=\"bg-green-700 mx-8 w-40 py-3 shadow-md rounded-md border-b-2 border-green-400 hover:border-green-500 space-y-1 text-3xl text-green-400 hover:text-green-500 focus:outline-none select-none text-center transition duration-300\"\n    {...props}\n  >\n    {props.children}\n  </button>\n);\n","import React, { Component } from \"react\";\nimport UIfx from \"uifx\";\nimport sound1 from \"../assets/sound1.mp3\";\nimport sound2 from \"../assets/sound2.mp3\";\nimport { MyButton } from \"./Components\";\n\nconst s1 = new UIfx(sound1);\nconst s2 = new UIfx(sound2);\n\nexport class Timer extends Component {\n  state = {\n    duration: 25 * 60,\n    seconds: 25 * 60,\n    timerActive: false,\n    time: 0,\n  };\n  mouseActive = false;\n  playedTimeStamps = [];\n\n  componentDidMount() {\n    this.update();\n    setInterval(this.update, 1000);\n    this.resetTimer();\n  }\n\n  // returns \"Creating\", \"Paused\", \"Finished\", \"Going\"\n  getTimerState = () => {\n    let { duration, seconds, timerActive } = this.state;\n    if (seconds === duration && !timerActive) return \"Creating\";\n    if (seconds === 0) return \"Finished\";\n    if (!timerActive) return \"Paused\";\n    return \"Going\";\n  };\n\n  update = () => {\n    let d = new Date();\n    this.setState({ time: d.getHours() * 60 + d.getMinutes() });\n    if (this.state.timerActive && this.state.seconds > 0) {\n      this.setState({ seconds: this.state.seconds - 1 });\n    }\n  };\n\n  startTimer = () => {\n    this.setState({ timerActive: true });\n  };\n\n  pauseTimer = () => {\n    this.setState({ timerActive: false });\n  };\n\n  resetTimer = () => {\n    this.setState({ timerActive: false, seconds: this.state.duration });\n    document.title = \"Pomodoro Clock\";\n    this.playedTimeStamps = [];\n  };\n\n  setTimerDuration = (duration) => {\n    this.setState({ duration, seconds: duration, timerActive: false });\n  };\n\n  setMouseMove = (e) => {\n    e.preventDefault();\n    this.mouseActive = true;\n\n    let timeout;\n    (() => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => (this.mouseActive = false), 5000);\n    })();\n  };\n\n  getFormattedTime = (seconds) => {\n    let mins = Math.floor(seconds / 60) + \"\";\n    if (mins.length === 1) mins = \"0\" + mins;\n    let secs = (seconds % 60) + \"\";\n    if (secs.length === 1) secs = \"0\" + secs;\n    return mins + \":\" + secs;\n  };\n\n  handleSound = (seconds) => {\n    if (\n      [1, 2, 3].includes(seconds) &&\n      !this.playedTimeStamps.includes(seconds)\n    ) {\n      this.playedTimeStamps.push(seconds);\n      s1.play();\n      console.log(\"Played Sound 1\");\n    }\n    if (seconds === 0 && !this.playedTimeStamps.includes(0)) {\n      this.playedTimeStamps.push(0);\n      s2.play();\n      console.log(\"Played Sound 2\");\n    }\n  };\n\n  render() {\n    let { seconds, duration, time } = this.state;\n    let timerState = this.getTimerState();\n\n    if (timerState !== \"Creating\")\n      document.title = \"Pomodoro - \" + this.getFormattedTime(seconds);\n\n    let progression = 1 - seconds / duration;\n    let formattedTime = this.getFormattedTime(seconds);\n    let currentTime = this.getFormattedTime(time);\n\n    this.handleSound(seconds);\n\n    if (!this.mouseActive && timerState === \"Going\")\n      document.getElementById(\"root\").style.cursor = \"none\";\n    else document.getElementById(\"root\").style.cursor = \"auto\";\n\n    return (\n      <div className=\"w-full\" onMouseMove={this.setMouseMove}>\n        <div className=\"flex justify-center h-20 items-center\">\n          {[\"Creating\", \"Finished\"].includes(timerState) && (\n            <React.Fragment>\n              <MyButton onClick={() => this.setTimerDuration(25 * 60)}>\n                25:00\n              </MyButton>\n              <MyButton onClick={() => this.setTimerDuration(5 * 60)}>\n                5:00\n              </MyButton>\n              {/* <MyButton>Custom</MyButton> */}\n            </React.Fragment>\n          )}\n        </div>\n        <div className=\"w-2/3 my-32 mx-auto\">\n          <div className=\"flex w-full justify-between items-end\">\n            <h1 className=\"big-text text-green-900\">{formattedTime}</h1>\n            {!!time && (\n              <h1 className=\"text-6xl text-green-700\">{currentTime}</h1>\n            )}\n          </div>\n          <div className=\"w-full h-px bg-green-800\"></div>\n          <div className=\"w-full h-px bg-green-800\"></div>\n          <div\n            className=\"h-2 bg-green-700\"\n            style={{ width: progression * 100 + \"%\" }}\n          ></div>\n        </div>\n\n        <div className=\"mb-8 flex justify-center h-20 items-center\">\n          {[\"Creating\"].includes(timerState) && (\n            <MyButton\n              onClick={() => {\n                this.resetTimer();\n                this.startTimer();\n              }}\n            >\n              Start\n            </MyButton>\n          )}\n          {timerState === \"Going\" && (\n            <div\n              className={\n                \"transition duration-1000 \" +\n                (this.mouseActive ? \"\" : \"opacity-0 hover:opacity-100\")\n              }\n            >\n              <MyButton onClick={this.pauseTimer}>Pause</MyButton>\n            </div>\n          )}\n          {timerState === \"Paused\" && (\n            <div>\n              <MyButton onClick={this.startTimer}>Continue</MyButton>\n              <MyButton onClick={this.resetTimer}>Reset</MyButton>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Timer;\n","import React, { Component } from \"react\";\nimport Timer from \"./Timer\";\nimport { MyButton } from \"./Components\";\n\nclass MainPage extends Component {\n  render() {\n    return (\n      <div className=\"flex flex-col h-screen bg-green-600 justify-center items-center\">\n        <Timer></Timer>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./tailwind.generated.css\";\nimport MainPage from \"./components/MainPage\";\n\nclass App extends React.Component {\n  render() {\n    return <MainPage></MainPage>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}